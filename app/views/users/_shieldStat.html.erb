<%
  variance = stat[:variance]
  @elixir = @DB[:_BindingOptionWithItem].where(:nitemdbid => obj[:id]).all.last
  @DurPrecent = 0
  @PhyReinPrecent = 0
  @MagReinPrecent = 0
  @BlockPrecent = 0
  @PhyDefPrecent = 0
  @MagDefPrecent = 0

  while variance > 0

    tempvariance = variance
    i = 0

    while tempvariance >= 32
      i = i + 1
      tempvariance = tempvariance / 32
    end

    case i
    when 0
      @DurPrecent = (100.to_d() /31.to_d()) * tempvariance
    when 1
      @PhyReinPrecent = (100.to_d() /31.to_d()) * tempvariance
    when 2
      @MagReinPrecent = (100.to_d() /31.to_d()) * tempvariance
    when 3
      @BlockPrecent = (100.to_d() /31.to_d()) * tempvariance
    when 4
      @PhyDefPrecent = (100.to_d() /31.to_d()) * tempvariance
    when 5
      @MagDefPrecent = (100.to_d() /31.to_d()) * tempvariance
    end

    tempvariance = tempvariance * 32**i
    variance = variance - tempvariance

  end

%>

<div class='item-data'>
  <div class='item-name <% if obj[:rarity] == 2 || obj[:rarity] == 6 %> sox  <% end %> '> <i> <img src='https://i.imgur.com/XRQbRPq.png'> </i> <%= obj[:objname128] %> <% if stat[:optlevel] != 0 %> (+ <%= stat[:optlevel] %>) <%end %> </div>
  <div class='nk-gap-1'></div>
  <br/>
  <% if obj[:rarity] == 2 || obj[:rarity] == 6 %>
    <div class='item-type sox'> <%= @sox_types[rare[:itemclass] % 3] %>   </div>
  <% end %>
  <br/>
  <div class='item-sort'> Sort of item: Shield  </div>
  <br/>
  <div class='item-sort'> Degree: <%= (rare[:itemclass] / 3.to_f).ceil() %> </div>
  <div class='nk-gap-1'></div>
  <br/>

  <div class='stats'> Phy.def.pwr
    <% if @PhyDefPrecent.zero? %>
     <%= rare[:pd_l].round(2) + (stat[:optlevel] * rare[:pdinc] ) %>
    <% elsif @PhyDefPrecent == 100 %>
      <%= rare[:pd_u].round(2) + (stat[:optlevel] * rare[:pdinc] ) %>
    <% else %>
      <%= ((rare[:pd_u].round(2) - rare[:pd_l].round(2)) * @PhyDefPrecent) + (stat[:optlevel] * rare[:pdinc] ) %>
    <% end %>
    (+<%= @PhyDefPrecent %>%)
  </div>
  <br/>
  <div class='stats'> Mag.def.pwr
    <% if @MagDefPrecent.zero? %>
      <%= rare[:md_l].round(2)  + (stat[:optlevel] * rare[:mdinc] ) %>
    <% elsif @MagDefPrecent == 100 %>
      <%= rare[:md_u].round(2) + (stat[:optlevel] * rare[:mdinc] ) %>
    <% else %>
      <%= ((rare[:md_u].round(2) - rare[:md_l].round(2)) * @MagDefPrecent) + (stat[:optlevel] * rare[:mdinc] ) %>
    <% end %>
    (+<%= @MagDefPrecent %>%)
  </div>
  <br/>
  <div class='stats'> Durability
    <% if @DurPrecent.zero? %>
     <%= stat[:data] %>/<%= rare[:dur_l].round(0) %>
    <% elsif @DurPrecent == 100 %>
      <%= stat[:data] %>/<%= rare[:dur_u].round(0) %>
    <% else %>
      <%= stat[:data] %>/<%= (rare[:dur_u].round(0) - rare[:dur_l].round(0)) * @DurPrecent %>
    <% end %>
    (+<%= @DurPrecent %>%)
  </div>
  <br/>
  <div class='stats'> Blocking rate
    <% if @BlockPrecent.zero? %>
      <%= rare[:br_l].round(0) %>
    <% elsif @BlockPrecent == 100 %>
      <%= rare[:br_u].round(0) %>
    <% else %>
      <%= (rare[:br_u].round(0) - rare[:br_l].round(0)) * @BlockPrecent %>
    <% end %>
    (+<%= @BlockPrecent %>%)
  </div>
  <br/>
  <div class='stats'> Phy. reinforce
    <% if @PhyReinPrecent.zero? %>
      <%= rare[:pdstr_l].round(2) / 10 %> %
    <% elsif @PhyReinPrecent == 100 %>
      <%= rare[:pdstr_u].round(2) / 10 %> %
    <% else %>
      <%= (rare[:pdstr_u].round(2) - rare[:pdstr_l].round(2)) * @PhyReinPrecent / 10 %> %
    <% end %>
    (+<%= @PhyReinPrecent %>%)
 </div>
  <br/>
  <div class='stats'> Mag. reinforce
    <% if @MagReinPrecent.zero? %>
      <%= rare[:mdint_l].round(2) / 10 %> %
    <% elsif @MagReinPrecent == 100 %>
      <%= rare[:mdint_u].round(2) / 10 %> %
    <% else %>
      <%= (rare[:mdint_u].round(2) - rare[:mdint_l].round(2)) * @MagReinPrecent / 10 %> %
    <% end %>
    (+<%= @MagReinPrecent %>%)
  </div>

  <div class='nk-gap-1'></div>
  <br/>
  <div class='stats'> Required level <%= obj[:reqlevel1] %> </div>
  <br/>
  <div class='stats'> Chinese  </div>
  <br/>
  <div class='item-sort'> Max.no.of magic options: <%= pluralize(rare[:maxmagicoptcount], 'Unit') %> </div>
  <br/>
  <div class='elixir'>
    <% if @elixir.nil? %>
      Able to use Advanced elixir
    <% elsif @elixir != nil %>
      Advanced Elixir used (+ <%= @elixir[:noptvalue] %>)
    <% end %>
  </div>
</div>